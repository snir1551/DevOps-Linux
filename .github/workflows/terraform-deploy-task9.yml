name: Terraform Deploy Task9

on:
  workflow_call:
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  terraform:
    name: Terraform Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: week9/week9_summery/Terraform
    env:
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Write SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Derive SSH Public Key
        id: ssh
        run: |
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          echo "ssh_public_key=$(cat ~/.ssh/id_rsa.pub)" >> "$GITHUB_OUTPUT"

      - name: Terraform Init
        run: terraform init


      - name: Conditionally Import Resource Group if Not Already in State
        run: |
          RG_NAME="mtc-resources"
          SUB_ID="${{ env.ARM_SUBSCRIPTION_ID }}"
          MODULE_PATH="module.resource_group.azurerm_resource_group.this"

          if terraform state list | grep -q "$MODULE_PATH"; then
            echo "Resource group already managed in Terraform state. Skipping import."
          else
            EXISTS=$(az group exists --name "$RG_NAME")
            if [ "$EXISTS" == "true" ]; then
              echo "Resource group exists. Importing into Terraform state..."
              terraform import -lock=false "$MODULE_PATH" "/subscriptions/$SUB_ID/resourceGroups/$RG_NAME"
            else
              echo "Resource group does not exist. Terraform will create it during apply."
            fi
          fi


      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="ssh_public_key=${{ steps.ssh.outputs.ssh_public_key }}"
        
      - name: Output Public IP
        run: terraform output public_ip_address