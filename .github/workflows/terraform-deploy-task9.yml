name: Terraform Deploy Task9

on:
  workflow_call:
    inputs:
      ssh_public_key:
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true

jobs:
  terraform:
    name: Terraform Setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: week9/week9_summery/Terraform
    env:
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Import existing resource group if it exists
        run: |
          RG_NAME="mtc-resources"
          MODULE_PATH="module.resource_group.azurerm_resource_group.this"
          RG_ID=$(az group show --name $RG_NAME --query "id" -o tsv 2>/dev/null || true)

          if [ -n "$RG_ID" ]; then
            echo "Resource group exists: $RG_ID"
            
            if ! terraform state list | grep -q "$MODULE_PATH"; then
              echo "Importing $RG_NAME to Terraform..."
              terraform import $MODULE_PATH $RG_ID
            else
              echo "Resource group already managed in Terraform state."
            fi
          else
            echo "Resource group does not exist, will be created by Terraform."
          fi


      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="ssh_public_key=${{ steps.ssh.outputs.ssh_public_key }}"
        
      - name: Output Public IP
        run: terraform output public_ip_address