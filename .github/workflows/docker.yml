name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare .env file for Docker Compose
        run: |
          echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_USERNAME }}" > .env
          echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
          echo "PORT=3000" >> .env
          echo "MONGO_HOST=mongodb" >> .env

      - name: Build and Run Docker Compose
        run: docker compose up -d

      - name: Wait for Webapp to be healthy
        id: wait_for_health
        run: |
          echo "Waiting for webapp container to be healthy..."
          timeout_seconds=180
          start_time=$(date +%s)
          FINAL_HEALTH_STATUS="unknown"
          while true; do
            status=$(docker inspect webapp --format '{{.State.Health.Status}}' 2>/dev/null || echo "not_found")
            if [ "$status" = "healthy" ]; then
              FINAL_HEALTH_STATUS="healthy"
              break
            elif [ "$status" = "not_found" ]; then
              echo "Webapp not found. Retrying..."
            else
              echo "Webapp status: $status. Waiting..."
            fi
            elapsed=$(( $(date +%s) - start_time ))
            if [ "$elapsed" -ge "$timeout_seconds" ]; then
              echo "Webapp did not become healthy in time."
              docker logs webapp
              FINAL_HEALTH_STATUS="unhealthy"
              exit 1
            fi
            sleep 10
          done
          echo "health_status=$FINAL_HEALTH_STATUS" >> "$GITHUB_OUTPUT"

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "Deployment Status: ${{ job.status }}\nWebapp Health: ${{ steps.wait_for_health.outputs.health_status }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_Docker }}

      - name: Clean up Docker Compose services
        if: always()
        run: docker compose down -v
